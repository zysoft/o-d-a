#summary Документ описывает взаимодействие между клиентом и сервером
#labels Phase-Design

= Обработка запросов =

_*Замечание*: Работа над документом еще в процессе_

Этот документ описывает методы, с помощью которых происходит обработка запросов на серверной и клиентской стороне.
Мы считаем, что наиболее эффективным способ построения клиентского и серверного приложений является асинхронная модель.
Таким образом, в приложении не будет собственных потоков (кроме случаев крайней необходимости), а все будет выполнятся событийно.

Чтобы достичь желаемого, нам нужно знать в каком состоянии находится каждый клиент в данный момент времени. Для этого
было решено взять [http://www.qtsoftware.com/products/appdev/add-on-products/catalog/4/Utilities/qt-state-machine-framework Qt State Machine Framework], который наилучшим образом подходит для этих целей.

<font color="red"> *Внимание*: Qt State Machine Framework необходим для компиляции приложения</font>

== Модель сервера ==

В серверном приложении существует специальный объект для каждого клиента, содержащий сокет, машину состояний (в текущем соостоянии) и все необходимые методы для обмена данными.

Конфигурация машины состояний завязана на события от сокета, однако обработка данных разнится, в зависимости от текущего состояния клиента.

Схема ниже показывает состояния и переходы для каждого из клиентов сервера:

[http://o-d-a.googlecode.com/svn/wiki_images/server_sm.png]

Ниже преведно назначение этих состояний:
 * *Init* - Машина состояний инициализирована (начальное состояние)
 * *Pre-auth* - Получен запрос токена, токен отправлен, ожидаем данные учетной записи
 * *Authentication* - Данные учетной записи получены, авторизуемся
 * *Command wait* - Центральное состояние клиента - ожидание команд
 * *Command route* - Кратковременное состояние, когда полученная команда перенаправляется в нужный обработчик (распознание операции)
 * *Operation 1...N execution* - Выполнение операции

Когда операция выполнена, клиент возвращается в состояние *Command wait*.

Ниже приведена схема для более полного понимания как работает машина состояний в связке с сокетом:

[http://o-d-a.googlecode.com/svn/wiki_images/server_sm_socket.png]

Порождение потоков - это потенциально допустимая операция, но следует избегать этого пока не останется другого выбора (для длительных синхронных операций).

*Request package* означает сам пакет, без преамбулы. 
*Response full package* означает отправку преамбулы и затем пакета.

Сервер предоставляет клиентским объектам специальный механизм для передачи данных друг другу. Сервер обрабатывает событие *route* (посылаемое клиентом) и перенаправляет его всем активным на данный момент объектам с помощью *signalRoute* сигнала. Этот процесс отображен на схеме ниже:

[http://o-d-a.googlecode.com/svn/wiki_images/server_sigroute.png]

Таким образом, у севрерного приложения существует два цикла обработки событий - один внутри каждого клиентского объекта и один для обмена данными между ними. Оба цикла независимы.

== Модель клиента ==

Модель клиента построена по тому же принципу, но имеет лишь одну машину состояний, отражающую состояние клиента в каждый момент времени. Состояния и переходы модели показаны на схеме ниже:

[http://o-d-a.googlecode.com/svn/wiki_images/client_sm.png]

Ниже преведно назначение состояний:
 * *Pre-init* - Клиент инициализирован и начал установление соединения с сервером (начальное состояние)
 * *Init* - Соединение установлено, отправлен запрос токена
 * *Auth step 1* - Токен получен, данные учетной записи отправлены, ожидание подтверждения сервера
 * *Auth step 2* - Получено подтверждение сервера. Проверяем
 * *Data wait* - Центральное состояние, клиент ожидает пакетов от сервера
 * *Data route* - Получен пакет, перенаправляем операцию
 * *Operation 1...N* - Обработка пакета

*Request wait* - это состояние, когда клиент ожидает пакетов от сервера. Выполнение запросов на сервере считаем атомарной операцией и не выделяем специальное состояние в машине состояний. Машина состояний используется для получения ответного пакета.

Схема ниже показывает машину состояний клиента в связке с сокетом:

[http://o-d-a.googlecode.com/svn/wiki_images/client_sm_socket.png]


*Response package* означает пакет данных без преамбулы.