#summary Протокол обмена данными между клиентом и сервером
#labels Phase-Design

<wiki:toc max_depth="3" />

= Введение =

Этот документ описывает взамодействие клиентской и серверной части Open Development Assistant.


= Протокол =

== Концепция ==

=== Идея ===

Протокол подразумевает постоянное подключение. Это значит, что клиент постоянно находится подключенным к серверу в процессе работы. В случае возникновения ошибок, клиент должен пересоединится и продолжить работу. Должен быть лимит на выполнение операций, чтобы препятствовать "зависанию" соединения.

=== Пакет данных ===

Протокол реализован в двоичном режиме и имеет "преамбулу", маркер размера данных и, собственно, пакет данные. Преамбула это число (размером 2 байта), идентифицирующее операцию (код операции). Маркер размера данных также является числом и определяет размер данных идущих следом. Пакет данных следует за маркером размера и его структура меняется в зависимости от требуемой операции.
Маркер размер передается в любом случае, даже если пакет данных пуст (в этом случает маркер будет содержать нулевое значение).

И клиентские и серверные пакеты строятся одинаково - преамбула, маркер размера, данные.
В случае возникновения ошибки, преамбула устанавливается в FFFF.

Клиент отправляет запрос и не ждет, пока придет ответ. Когда ответ будет получен, клиент обработает его с помощью механизма обработки пакетов (см. [ProcessingRequests Обработка запросов]).


== Запросы клиента ==

=== Авторизация ===

Аутентификация - это первая операция после установления соединения. Клиент должен аутентифицироваться каждый раз, когда устанавливает соединение.

Пользователь аутентифицируется по логину и паролю (данным учетной записи). Данные учетной записи находятся под ответственностью администратора. Открытая регистрация недоступна.

||                                          *Клиент*              ||                     *Сервер*          ||
|| *Операция*: Auth start<br/>*Пакет*: пустой               || *Операция*: Auth start<br/>*Пакет*: authToken       ||
|| *Операция*: Authenticate<br/>*Пакет*: логин, токен-хеш от пароля || *Операция*: Authenticate / FFFF (ошибка)<br/>*Пакет*: минимальная информация о пользователе / код ошибки ||


Минимальная информация о пользователе содержит:
 * UID (уникальный идентификатор пользователя)
 * Полное имя
 * Название компании
 * CID (уникальный идентификатор компании)


=== Получение информации о пользователе ===

Информация о пользователе хранится на сервере и может быть получена с помощью специальной инструкции.

Эта информация содержит:
 * Список проектов, в которых участвует пользователь (собирается из подключенных баг-трекеров)
 * Список задач, назначенных на данного пользователя

Запрос на получение этой информации выглядит следующим образом:

||                                          *Клиент*            ||                     *Сервер*         ||
|| *Операция*: Get user info<br/>*Пакет*: пустой           || *Операция*: Get User info / FFFF (ошибка)<br/>*Пакет*: информация о пользователе / код ошибки ||

Сервер присылает списки проектов и задач.

Каждый проект из списка содержит:
 * Уникальный идентификатор трекера (TRID) (для последующих операций)
 * Уникальный идентификатор проекта (PID) (для последующих операций)
 * Имя
 * Список назначенных задач по проекту
 * Список деятельности (development, bugfixing, research, и т.д. в зависимости от настроек трекера)

Каждая задача из списка содержит:
 * Уникальный идентификатор задачи (TID) (для последующих операций)
 * Уникальный идентификатор проекта (PID) (для последующих операций)
 * Имя (тема)
 * Описание (с историей изменений)
 * Приоритет
 * Статус
 * % готовности
 * Автор задачи (полное имя)
 * Дата создания
 * Расчетное время (estimate)
 * Расчетная дата окончания (due date)

=== Список контактов ===

Контакты пользователя различаются по типам. Определены такие типы: "COMPANY", "OFFICE", и "TEAM". "TEAM" означет контакты команды и зависит от проекта.

Следающий запрос позволит получить список контактов:

||                                          *Клиент*            ||                     *Сервер*         ||
|| *Операция*: Get contacts<br/>*Пакет*: тип контактов    || *Операция*: Get Contacts / FFFF (ошибка)<br/>*Пакет*: список контактов / код ошибки ||

Пакет "тип контактов" содержит идентификатор типа и идентификатор проекта. Идентификатор проекта является обязательным в случае получения контактов типа "TEAM".

=== Отправка чат сообщений ===

Существует возможность отправлять контактам чат сообщения. Также возможно отправлять сообщениия группам контактов.
Следующий запрос позволяет это сделать:

||                                          *Клиент*            ||                     *Сервер*         ||
|| *Операция*: Send message<br/>*Пакет*: сообщение    || *Операция*: отсутствует / FFFF (ошибка)<br/>*Пакет*: отсутствует / код ошибки ||

Пакет сообщения содержит текст сообщения и список идентификаторов получателей.

=== Отчет по задаче ===

Клиент может отчитаться по задаче и/или изменить ее параметры. 
Следующий запрос позволяет выполнить такую операцию:

||                                          *Клиент*            ||                     *Сервер*         ||
|| *Операция*: Task report<br/>*Пакет*: отчет    || *Операция*: отсутствует / FFFF (ошибка)<br/>*Пакет*: отсутствует / код ошибки ||

Пакет отчета содержит:
 * Идентификатор задачи (TID)
 * Идентификатор проекта (PID)
 * Комментарий
 * Затраченное время
 * % готовности
 * Идентификатор назначаемого (если задача переназначается)
 * Статус
 * Вручную установленное затраченное время
 * Тип деятельности (development, research, и т.д.)


=== Получение параметров задачи ===

Поскольку роль пользователя меняется от проекта к проекту, параметры задачи также могут меняться. Это применимо как к существующим задачам, так и к создаваемымм.

Получить параметры задачи можно следующим образом:

||                                          *Клиент*            ||                     *Сервер*         ||
|| *Операция*: Get task parameters<br/>*Пакет*: информация о задаче    || *Операция*: Get task parameters / FFFF (ошибка)<br/>*Пакет*: параметры задачи / код ошибки ||

Информация о задаче содержит:
 * Идентификатор трекера (TID)
 * Идентификатор проекта (PID)
 * Идентификатор задачи (TID, необязательно)

К параметрам задачи относятся:
 * Список доступных типов (bug, task, feature, и т.д. в засисимости от настроек трекера)
 * Список доступных статусов (в засисимости от настроек трекера)
 * Список доступных приоритетов (в засисимости от настроек трекера)
 * Список доступных категорий (frontend, backend, в засисимости от настроек трекера)
 * Список доступных участников (в засисимости от настроек проекта)

=== Создание задачи ===

Клиент имеет возможность создавать задачи с помощью следующего запроса:

||                                          *Клиент*            ||                     *Сервер*         ||
|| *Операция*: Create task<br/>*Пакет*: задача    || *Операция*: отсутствует / FFFF (ошибка)<br/>*Пакет*: отсутствует / код ошибки ||

Пакет задачи содержит:
 * Идентификатор трекера (TID)
 * Идентификатор проекта (PID)
 * Тип
 * Статус
 * Приоритет
 * Категорию (необязательно)
 * Участника проекта для назначения задачи (UID)

== Нотификации сервера ==

=== Изменение статуса контакта ===

Когда контакт меняет статус, сервер отправляет следующую нотификацию:

||                         *Сервер*                                ||
|| *Операция*: Status notification<br/>*Пакет*: информация о статусе ||

Информация о статусе содержит идентификатор пользователя (UID) и код нового статуса.

=== Обновление списка задач ===

Эта нотификация сообщает клиенту об изменении в списке задач:

||                         *Сервер*                                 ||
|| *Операция*: Tasks update notification<br/>*Package*: пусто ||


=== Новое чат сообщение ===

Когда приходит новое чат сообщение, отсылается следующая нотификация:

||                         *Сервер*                          ||
|| *Операция*: New message notification<br/>*Пакет*: сообщение ||

Пакет сообщения содержит идентификатор (UID) отправителя и текст сообщения.

= Приложение A - Формат пакетов протокола ==

=== Auth start ===

_Запрос клиента_ - пусто.

_Ответ сервера_:

|| *token* - аутентификационный токен ||



=== Authenticate ===


_Запрос клиента_:

|| *login* - логин пользователя (просто текст) <br/> *password* - токен-хеш от пароля ||

_Ответ сервера_:

|| *uid* - идентификатор пользователя <br/> *cid* - идентификатор компании <br/> *fullName* - полное имя <br/> *companyName* - название компании ||

_*Замечание*: Пароли хранятся в базе данных, как SHA1 хеши. Поле *Password* получается как SHA1(token+passwordHash). Таким образом, полная формула выглядит как SHA1(token+SHA1(password))_


=== Get contacts ===

_Запрос клиента_:

|| *contactsType* - тип контактов <br/> *pid* - идентификатор проекта для получение контактов команды ||

_Ответ сервера_:

|| *count* - количество контактов<br/> *contact0* - информация о контакте 0<br/>*...*<br/>*contactN* - информация о контакте N ||

Информация о каждом контакте содержит:

|| *uid* - идентификатор пользователя<br/>*fullName* - полное имя контакта<br/>*status* - статус контакта ||


=== Send message ===

_Запрос клиента_:

|| *message* - текст сообщения<br/>*count* - количество получателей<br/>*uid0* - идентификатор получателя 0<br/>*...*<br/>*uidN* - идентификатор получателя N ||



=== New message notificaion ===

_Нотификация сервера_:

|| *uid* - идентификатор отправителя<br/>*message* - текст сообщения ||


=== New status notification ===

_Нотификация сервера_:

|| *uid* - идентификатор пользователя<br/>*status* - код статуса ||
